---
import { getCollection } from "astro:content"
import HomepageEntryGroup from "../components/HomepageEntryGroup.astro"
import Layout from "../components/Layout.astro"

const entries = await Promise.all(
  (
    await getCollection("decks", (entry) => !entry.data.hidden)
  ).map(async (entry) => ({
    category: entry.data.category,
    title:
      entry.data.title ||
      (
        await entry.render()
      ).headings[0]?.text ||
      "Untitled deck",
    slug: entry.slug,
  })),
)

type Entry = (typeof entries)[number]

if (import.meta.env.SORT_METHOD == "TITLE") {
  entries.sort((a, b) => (a.title < b.title ? -1 : a.title == b.title ? 0 : 1))
} else if (import.meta.env.SORT_METHOD == "FILE") {
  entries.sort((a, b) => (a.slug < b.slug ? -1 : a.slug == b.slug ? 0 : 1))
}

const categoryMap: Record<string, Entry[]> = Object.create(null)

for (const entry of entries) {
  if (entry.category) {
    ;(categoryMap[entry.category] ??= []).push(entry)
  }
}

const categories = Object.entries(categoryMap).sort(([a], [b]) =>
  a < b ? -1 : a > b ? 1 : 0,
)
---

<Layout deck={undefined} title={import.meta.env.TITLE}>
  <h1
    class="mx-auto mb-4 max-w-prose text-center text-3xl font-light text-[--z-preview]"
  >
    {import.meta.env.TITLE}
  </h1>

  <p
    class="mx-auto mb-16 max-w-prose text-center text-lg text-[--z-preview-subtitle]"
  >
    {import.meta.env.SUBTITLE}
  </p>

  <HomepageEntryGroup
    category={undefined}
    entries={entries.filter((entry) => !entry.category)}
  />

  {
    categories.map(([category, entries]) => (
      <HomepageEntryGroup category={category} entries={entries} />
    ))
  }
</Layout>

<style is:global>
  html {
    @apply bg-[--z-preview-bg] px-8 py-64 sm:py-16 md:py-48;
  }
</style>
