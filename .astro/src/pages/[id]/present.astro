---
import { getCollection, getEntryBySlug } from "astro:content"
import "katex/dist/katex.min.css"
import Layout from "../../components/Layout.astro"
import "../../lib/main.postcss"
import { convertToHTML } from "../../lib/md-to-html"
import "../../lib/theme.postcss"

const entry = (await getEntryBySlug("decks", Astro.params.id!))!
const headings = (await entry.render()).headings
const title = headings[0]?.text || "Untitled deck"
const html = entry && convertToHTML(entry.body)

export async function getStaticPaths() {
  const slides = await getCollection("decks")

  return slides.map((x) => ({ params: { id: x.slug } }))
}
---

<Layout title={title} set:html={html} />

<style is:global>
  html {
    @apply bg-black;
  }

  main {
    @apply h-full overflow-y-auto overscroll-none p-0;

    > section {
      @apply fixed left-auto top-[calc(50vh_-_2.8125in)] origin-center scale-[var(--section-scale)] transform rounded-none;
    }
  }
</style>

<script>
  const main = document.getElementsByTagName("main")[0]!

  function setSectionScaling() {
    const size = Math.min(innerWidth / 960, innerHeight / 540)

    main.style.setProperty("--section-scale", size * 100 + "%")
  }

  setSectionScaling()

  addEventListener("resize", setSectionScaling)

  const slides = [...document.querySelectorAll<HTMLElement>("main > section")]

  let currentSlide = 0

  function updateCurrentSlide(value: number) {
    if (value < 0) value = 0
    if (value >= slides.length) value = slides.length - 1

    const previous = slides[currentSlide]!
    const next = slides[(currentSlide = value)]!

    previous.style.zIndex = "1"
    next.style.zIndex = "2"
  }

  updateCurrentSlide(0)

  addEventListener("keydown", (event) => {
    if (event.altKey || event.ctrlKey || event.metaKey) {
      return
    }

    if (event.key == "ArrowLeft") {
      updateCurrentSlide(currentSlide - 1)
    }

    if (event.key == "ArrowRight") {
      updateCurrentSlide(currentSlide + 1)
    }
  })

  addEventListener("click", (event) => {
    const path = event.composedPath()

    for (const el of path) {
      if (el instanceof HTMLAnchorElement) {
        const href = el.getAttribute("href")

        if (href?.startsWith("#")) {
          const section = document.getElementById(href.slice(1))
          const index = slides.indexOf(section!)

          if (index != -1) {
            updateCurrentSlide(index)
          }
        }
      }
    }
  })
</script>
